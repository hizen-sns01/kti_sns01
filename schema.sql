-- 1. Tables
CREATE TABLE IF NOT EXISTS public.chatrooms (
    id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY,
    name text NOT NULL,
    description text,
    interest text UNIQUE,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

CREATE TABLE IF NOT EXISTS public.messages (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    chatroom_id uuid REFERENCES public.chatrooms(id) NOT NULL,
    user_id uuid REFERENCES auth.users(id) NOT NULL,
    content text NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

CREATE TABLE IF NOT EXISTS public.participants (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    chatroom_id uuid REFERENCES public.chatrooms(id) NOT NULL,
    user_id uuid REFERENCES auth.users(id) NOT NULL,
    last_read_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(chatroom_id, user_id)
);

-- 2. Seed data
INSERT INTO public.chatrooms (name, description, interest) VALUES
('React', 'React, Next.js, and all things frontend.', 'Frontend'),
('Node.js', 'Discussing Node.js, Express, and backend development.', 'Backend'),
('Python', 'Everything about Python, from web dev to data science.', 'Python'),
('DevOps', 'CI/CD, Docker, Kubernetes, and more.', 'DevOps')
ON CONFLICT (interest) DO NOTHING;

-- 3. Row Level Security (RLS)
ALTER TABLE public.chatrooms ENABLE ROW LEVEL SECURITY;
-- Allow all authenticated users to view all chatrooms
DROP POLICY IF EXISTS "Users can view chatrooms they are in" ON public.chatrooms;
DROP POLICY IF EXISTS "Authenticated users can view all chatrooms" ON public.chatrooms;
CREATE POLICY "Authenticated users can view all chatrooms" ON public.chatrooms FOR SELECT
TO authenticated
USING (true);

ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Users can view messages in chatrooms they are in" ON public.messages;
CREATE POLICY "Users can view messages in chatrooms they are in" ON public.messages FOR SELECT
USING (
  public.is_participant(chatroom_id)
);

DROP POLICY IF EXISTS "Users can insert messages in chatrooms they are in" ON public.messages;
CREATE POLICY "Users can insert messages in chatrooms they are in" ON public.messages FOR INSERT
WITH CHECK (
  public.is_participant(chatroom_id)
);

ALTER TABLE public.participants ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Users can view participants in chatrooms they are in" ON public.participants;
CREATE POLICY "Users can view participants in chatrooms they are in" ON public.participants
FOR SELECT
USING (
  public.is_participant(chatroom_id)
);

DROP POLICY IF EXISTS "Users can update their own participation record" ON public.participants;
CREATE POLICY "Users can update their own participation record" ON public.participants
FOR UPDATE
USING (
  user_id = auth.uid()
)
WITH CHECK (
  user_id = auth.uid()
);

-- Allow authenticated users to view all profiles
-- This is necessary for the chat feature to display user information
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Authenticated users can view profiles" ON public.profiles;
CREATE POLICY "Authenticated users can view profiles" ON public.profiles FOR SELECT
TO authenticated
USING (true);

-- 4. Realtime (Run this part separately if it causes issues)
-- ALTER PUBLICATION supabase_realtime ADD TABLE public.messages;
