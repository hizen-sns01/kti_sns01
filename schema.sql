-- Create a table for public chatrooms
create table if not exists chatrooms (
  id uuid default gen_random_uuid() primary key,
  name text not null,
  description text,
  interest text,,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create a table for messages
create table if not exists messages (
  id bigint generated by default as identity primary key,
  chatroom_id uuid references chatrooms(id) not null,
  user_id uuid references auth.users(id) not null,
  content text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create a join table for users and chatrooms
create table if not exists participants (
  id bigint generated by default as identity primary key,
  chatroom_id uuid references chatrooms(id) not null,
  user_id uuid references auth.users(id) not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(chatroom_id, user_id)
);

-- Enable Realtime for the messages table
-- alter publication supabase_realtime add table messages;

-- Set up Row Level Security (RLS)
-- Allow users to see chatrooms they are a part of
alter table chatrooms enable row level security;
create policy "Users can view chatrooms they are in" on chatrooms for select
using (
  exists (
    select 1
    from participants
    where participants.chatroom_id = chatrooms.id
    and participants.user_id = auth.uid()
  )
);

-- Allow users to see messages in chatrooms they are a part of
alter table messages enable row level security;
create policy "Users can view messages in chatrooms they are in" on messages for select
using (
  exists (
    select 1
    from participants
    where participants.chatroom_id = messages.chatroom_id
    and participants.user_id = auth.uid()
  )
);

-- Allow users to insert messages in chatrooms they are a part of
create policy "Users can insert messages in chatrooms they are in" on messages for insert
with check (
  exists (
    select 1
    from participants
    where participants.chatroom_id = messages.chatroom_id
    and participants.user_id = auth.uid()
  )
);

-- Allow users to see participants in chatrooms they are a part of
alter table participants enable row level security;
create policy "Users can view participants in chatrooms they are in" on participants for select
using (
  exists (
    select 1
    from participants p
    where p.chatroom_id = participants.chatroom_id
    and p.user_id = auth.uid()
  )
);

-- Seed data for chatrooms
INSERT INTO chatrooms (name, description, interest) VALUES
('React', 'React, Next.js, and all things frontend.', 'Frontend'),
('Node.js', 'Discussing Node.js, Express, and backend development.', 'Backend'),
('Python', 'Everything about Python, from web dev to data science.', 'Python'),
('DevOps', 'CI/CD, Docker, Kubernetes, and more.', 'DevOps')
ON CONFLICT (interest) DO NOTHING;
